// ูุธุงู ุงูุชุฑุฌูุฉ ุงูููุญุฏ - El7hm
// Unified Translation System

export type Language = 'ar' | 'en';
export type Direction = 'rtl' | 'ltr';

// ุฅุนุฏุงุฏุงุช ุงููุบุงุช ุงููุฏุนููุฉ
export const SUPPORTED_LANGUAGES = {
  ar: {
    name: 'ุงูุนุฑุจูุฉ',
    nativeName: 'ุงูุนุฑุจูุฉ',
    direction: 'rtl' as Direction,
    flag: '๐ธ๐ฆ',
    locale: 'ar-SA'
  },
  en: {
    name: 'English',
    nativeName: 'English',
    direction: 'ltr' as Direction,
    flag: '๐บ๐ธ',
    locale: 'en-US'
  }
} as const;

// ุงูุญุตูู ุนูู ุงููุบุฉ ุงูุงูุชุฑุงุถูุฉ
export const getDefaultLanguage = (): Language => {
  // Always default to Arabic for consistency between server and client
  if (typeof window !== 'undefined') {
    const savedLang = localStorage.getItem('el7hm-language') as Language;
    if (savedLang && SUPPORTED_LANGUAGES[savedLang]) {
      return savedLang;
    }
    
    // For now, always default to Arabic to prevent hydration issues
    // In the future, we can implement proper server-side language detection
    return 'ar';
  }
  return 'ar'; // ุงูุชุฑุงุถู
};

// ุญูุธ ุงููุบุฉ ุงููุฎุชุงุฑุฉ
export const setLanguage = (lang: Language): void => {
  if (typeof window !== 'undefined') {
    localStorage.setItem('el7hm-language', lang);
    document.documentElement.lang = lang;
    document.documentElement.dir = SUPPORTED_LANGUAGES[lang].direction;
  }
};

// ุงูุญุตูู ุนูู ุงุชุฌุงู ุงููุบุฉ
export const getLanguageDirection = (lang: Language): Direction => {
  return SUPPORTED_LANGUAGES[lang].direction;
};

// ุงูุญุตูู ุนูู ูุนูููุงุช ุงููุบุฉ
export const getLanguageInfo = (lang: Language) => {
  return SUPPORTED_LANGUAGES[lang];
};

// ุฏุงูุฉ ุงูุชุฑุฌูุฉ ุงูุฃุณุงุณูุฉ
export const t = (key: string, language: Language = 'ar', fallback?: any): any => {
  // ุงุณุชูุฑุงุฏ ุงูุชุฑุฌูุงุช ุญุณุจ ุงููุบุฉ
  let translations: any;
  
  try {
    if (language === 'ar') {
      // ุงุณุชูุฑุงุฏ ูุจุงุดุฑ ููุชุฑุฌูุฉ ุงูุนุฑุจูุฉ
      const arTranslations = {
        home: {
          sections: {
            hero: {
              slide1: {
                title: "ููุตุฉ ุฅูุญูู ุงูุฑูุงุถูุฉ",
                subtitle: "ุฑุจุท ุงููุงุนุจูู ุจุงููุฑุต ุงูุนุงูููุฉ"
              },
              slide2: {
                title: "ุฅุฏุงุฑุฉ ุงูุฃูุฏูุฉ ูุงููุงุนุจูู",
                subtitle: "ููุตุฉ ุดุงููุฉ ููุฑูุงุถุฉ"
              },
              slide3: {
                title: "ููุงูุงุช ุงููุงุนุจูู",
                subtitle: "ุฎุฏูุงุช ุงุญุชุฑุงููุฉ ููุชูุซูู"
              },
              slide4: {
                title: "ุงูุฃูุงุฏูููุงุช ุงูุฑูุงุถูุฉ",
                subtitle: "ุชุทููุฑ ุงูููุงูุจ ูุงูุชุฏุฑูุจ"
              },
              slide5: {
                title: "ุงููุฏุฑุจูู ุงููุญุชุฑููู",
                subtitle: "ุชุฏุฑูุจ ูุชุฎุตุต ููุชูุฏู"
              },
              slide6: {
                title: "ุงููุดุงูุฉ ูุงูููุงูุจ",
                subtitle: "ุงูุชุดุงู ูุชุทููุฑ ุงูููุงูุจ"
              },
              slide7: {
                title: "ุงูุฑุนุงุฉ ูุงูุดุฑูุงุก",
                subtitle: "ุดุฑุงูุงุช ุงุณุชุฑุงุชูุฌูุฉ"
              }
            },
            services: {
              title: "ุฎุฏูุงุชูุง",
              performanceAnalysis: {
                title: "ุชุญููู ุงูุฃุฏุงุก",
                description: "ุชูููู ุดุงูู ูุฃุฏุงุก ุงููุงุนุจ ูุงูุชุญูููุงุช",
                button: "ุงุนุฑู ุงููุฒูุฏ"
              },
              professionalOffers: {
                title: "ุงูุนุฑูุถ ุงูุงุญุชุฑุงููุฉ",
                description: "ุชูุงุตู ูุน ุฃูุถู ุงูุฃูุฏูุฉ ูุงููุฑุต ุงูุงุญุชุฑุงููุฉ",
                button: "ุงุนุฑู ุงููุฒูุฏ"
              },
              internationalTrials: {
                title: "ุงูุงุฎุชุจุงุฑุงุช ุงูุฏูููุฉ",
                description: "ุงููุตูู ููุงุฎุชุจุงุฑุงุช ุงูุฏูููุฉ ูุฃุญุฏุงุซ ุงููุดู",
                button: "ุงุนุฑู ุงููุฒูุฏ"
              },
              negotiationAgency: {
                title: "ููุงูุฉ ุงูุชูุงูุถ",
                description: "ุงูุชูุงูุถ ุงูุงุญุชุฑุงูู ุนูู ุงูุนููุฏ ูุงูุชูุซูู",
                button: "ุงุนุฑู ุงููุฒูุฏ"
              },
              legalContracts: {
                title: "ุงูุนููุฏ ุงููุงููููุฉ",
                description: "ูุฑุงุฌุนุฉ ุงูุนููุฏ ุงููุงููููุฉ ูุฎุฏูุงุช ุงูุงูุชุซุงู",
                button: "ุงุนุฑู ุงููุฒูุฏ"
              },
              logisticsServices: {
                title: "ุฎุฏูุงุช ุงูููุฌุณุชูุงุช",
                description: "ุฏุนู ููุฌุณุชู ูุงูู ูุงูุชูุงูุงุช ุงููุงุนุจูู",
                button: "ุงุนุฑู ุงููุฒูุฏ"
              }
            }
          }
        }
      };
      translations = arTranslations;
    } else {
      const enModule = require('./en');
      translations = enModule.default || enModule;
    }
  } catch (error) {
    console.warn(`Translation file not found for language: ${language}`, error);
    return fallback || key;
  }

  // ุงูุจุญุซ ูู ุงูุชุฑุฌูุงุช
  const keys = key.split('.');
  let current: any = translations;
  
  for (const k of keys) {
    if (current && typeof current === 'object' && k in current) {
      current = current[k];
    } else {
      // ูุง ูุทุจุน ุชุญุฐูุฑ ููู ููุชุงุญ ููููุฏ ูุชุฌูุจ ุงูููุถ ูู ุงููููุณูู
      return fallback || key;
    }
  }
  
  // ุฅุฑุฌุงุน ุงููููุฉ ููุง ูู (ูููู ุฃู ุชููู string, array, object, etc.)
  return current;
};

// ุฏุงูุฉ ุงูุชุฑุฌูุฉ ูุน ูุชุบูุฑุงุช
export const tWithVars = (key: string, vars: Record<string, any> = {}, language: Language = 'ar', fallback?: string): string => {
  let translation = t(key, language, fallback);
  
  // ุฅุฏุฑุงุฌ ุงููุชุบูุฑุงุช ูู ุงููุต
  Object.entries(vars).forEach(([varKey, varValue]) => {
    translation = translation.replace(new RegExp(`{{${varKey}}}`, 'g'), String(varValue));
  });
  
  return translation;
};

// ุชูุณูู ุงูุชุงุฑูุฎ
export const formatDate = (date: Date | string, language: Language = 'ar', options?: Intl.DateTimeFormatOptions): string => {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  const defaultOptions: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    ...options
  };
  return dateObj.toLocaleDateString(SUPPORTED_LANGUAGES[language].locale, defaultOptions);
};

// ุชูุณูู ุงูุฃุฑูุงู
export const formatNumber = (number: number, language: Language = 'ar'): string => {
  return number.toLocaleString(SUPPORTED_LANGUAGES[language].locale);
};

// ุชูุณูู ุงูุนููุฉ
export const formatCurrency = (amount: number, currency: string = 'EGP', language: Language = 'ar'): string => {
  const currencyMap: Record<string, string> = {
    'EGP': language === 'ar' ? 'ุฌููู ูุตุฑู' : 'Egyptian Pound',
    'SAR': language === 'ar' ? 'ุฑูุงู ุณุนูุฏู' : 'Saudi Riyal',
    'AED': language === 'ar' ? 'ุฏุฑูู ุฅูุงุฑุงุชู' : 'UAE Dirham',
    'USD': language === 'ar' ? 'ุฏููุงุฑ ุฃูุฑููู' : 'US Dollar',
    'EUR': language === 'ar' ? 'ููุฑู' : 'Euro'
  };
  const currencyName = currencyMap[currency] || currency;
  return `${formatNumber(amount, language)} ${currencyName}`;
}; 